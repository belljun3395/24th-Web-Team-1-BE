name: ECS CD

on:
    push:
        branches:
            - dev
    workflow_dispatch:
env:
    AWS_REGION: ap-northeast-2
    ECR_REPOSITORY: few-ecr
    ECS_SERVICE: few-ecs-service
    ECS_CLUSTER: few-ecs-cluster
    ECS_TASK_DEFINITION: task-definition.json
    TASK_DEFINITION_NAME: few-ecs-task
    CONTAINER_NAME: few-container

jobs:
    checkout:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
              with:
                  path: |
                      ~/.gradle/caches
                      ~/.gradle/wrapper
                  key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
                  restore-keys: |
                      ${{ runner.os }}-gradle-

    setup-java:
        runs-on: ubuntu-latest
        needs: checkout
        steps:
            - name: Set up JDK 17
              uses: actions/setup-java@v3
              with:
                  java-version: '17'
                  distribution: 'temurin'

    jooq-codegen:
        runs-on: ubuntu-latest
        needs: setup-java
        steps:
            - name: Jooq Code Generation
              run: ./gradlew --info jooqCodegenAll

    test:
        runs-on: ubuntu-latest
        needs: jooq-codegen
        steps:
            - name: Test with Gradle
              run: ./gradlew --info test

    build:
        runs-on: ubuntu-latest
        needs: test
        steps:
            - name: Build with Gradle
              run: ./gradlew --info api:build -x test

    generate-openapi:
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: Generate OpenAPI3
              run: ./gradlew --info api:openapi3 -PserverUrl=https://api.fewletter.site

    generate-swagger:
        runs-on: ubuntu-latest
        needs: generate-openapi
        steps:
            - name: Generate Swagger
              run: ./gradlew --info api:generateStaticSwaggerUIApi

    configure-aws-credentials:
        runs-on: ubuntu-latest
        needs: generate-swagger
        steps:
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY }}
                  aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

    login-ecr:
        runs-on: ubuntu-latest
        needs: configure-aws-credentials
        steps:
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

    build-and-push-docker-image:
        runs-on: ubuntu-latest
        needs: login-ecr
        steps:
            - name: Grant execute permission for gradlew
              run: chmod +x gradlew

            - name: Build with Gradle bootBuildImage, tag, and push image to Amazon ECR
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
              run: |
                  GIT_HASH=$(git rev-parse --short HEAD)
                  ./gradlew buildEcsDockerImage -PimageName=${ECR_REGISTRY}/${ECR_REPOSITORY}:latest
                  docker tag ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest ${ECR_REGISTRY}/${ECR_REPOSITORY}:${GIT_HASH}
                  docker push ${ECR_REGISTRY}/${ECR_REPOSITORY} --all-tags

            - name: Get ECR Repository image path
              id: get-docker-image-path
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
              run: |
                  GIT_HASH=$(git rev-parse --short HEAD)
                  echo ${ECR_REGISTRY}/${ECR_REPOSITORY}:${GIT_HASH}
                  echo "::set-output name=image::${ECR_REGISTRY}/${ECR_REPOSITORY}:${GIT_HASH}"

    download-task-definition:
        runs-on: ubuntu-latest
        needs: build-and-push-docker-image
        steps:
            - name: Download task definition
              run: |
                  aws ecs describe-task-definition --task-definition ${TASK_DEFINITION_NAME} --query taskDefinition > task-definition.json

    fill-in-new-image-id:
        runs-on: ubuntu-latest
        needs: download-task-definition
        steps:
            - name: Fill in the new image ID in the Amazon ECS task definition
              id: task-definition
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                  task-definition: ${{ env.ECS_TASK_DEFINITION }}
                  container-name: ${{ env.CONTAINER_NAME }}
                  image: ${{ steps.get-docker-image-path.outputs.image }}
