name: CI Process

on:
    push:
        branches: [ "main" ]
    workflow_dispatch:

permissions:
    contents: read

env:
    RELEASE_VERSION: ${{ github.sha }}
    EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}

jobs:
    checkout:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
              with:
                path: |
                    ~/.gradle/caches
                    ~/.gradle/wrapper
                key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
                restore-keys: |
                    ${{ runner.os }}-gradle-

    setup-java:
        runs-on: ubuntu-latest
        needs: checkout
        steps:
            - name: Set up JDK 17
              uses: actions/setup-java@v3
              with:
                  java-version: '17'
                  distribution: 'temurin'
                  cache: gradle

    jooq-codegen:
        runs-on: ubuntu-latest
        needs: setup-java
        steps:
            - name: Jooq Code Generation
              run: ./gradlew --info jooqCodegenAll

    test:
        runs-on: ubuntu-latest
        needs: jooq-codegen
        steps:
            - name: Test with Gradle
              run: ./gradlew --info test

    build:
        runs-on: ubuntu-latest
        needs: test
        steps:
            - name: Build with Gradle
              run: ./gradlew --info api:build -x test

    generate-openapi:
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: Generate OpenAPI3
              run: ./gradlew --info api:openapi3 -PserverUrl=https://api.fewletter.site

    generate-swagger:
        runs-on: ubuntu-latest
        needs: generate-openapi
        steps:
            - name: Generate Swagger
              run: ./gradlew --info api:generateStaticSwaggerUIApi

    docker-login:
        runs-on: ubuntu-latest
        needs: generate-swagger
        steps:
            - name: Docker Login
              run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

    build-docker-image:
        runs-on: ubuntu-latest
        needs: docker-login
        steps:
            - name: Build Docker Image
              run: ./gradlew --info api:buildDockerImage -PimageName=fewletter/api -PreleaseVersion=${{ env.RELEASE_VERSION }}
